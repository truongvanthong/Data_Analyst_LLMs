import matplotlib.pyplot as plt
import pandas as pd
import streamlit as st
from dotenv import load_dotenv
from langchain_experimental.agents.agent_toolkits.pandas.base import create_pandas_dataframe_agent
from langchain_openai import ChatOpenAI

from src.logger.base import BaseLogger
from src.models.llms import load_llm
from src.utils import execute_plt_code

# load environment varibles
load_dotenv()
logger = BaseLogger()
MODEL_NAME = "gpt-3.5-turbo"
# MODEL_NAME = "gemini-1.5-pro-latest"


def process_query(da_agent, query):
    response = da_agent.invoke(query)

    # L·∫•y intermediate_steps, n·∫øu kh√¥ng c√≥ th√¨ l√† list r·ªóng
    intermediate_steps = response.get("intermediate_steps", [])
    action = None  # M·∫∑c ƒë·ªãnh l√† None ƒë·ªÉ ph√≤ng tr∆∞·ªùng h·ª£p kh√¥ng l·∫•y ƒë∆∞·ª£c

    # Th·ª≠ l·∫•y action n·∫øu intermediate_steps c√≥ d·ªØ li·ªáu
    if intermediate_steps:
        last_step = intermediate_steps[-1]  # L·∫•y b∆∞·ªõc cu·ªëi
        if len(last_step) > 0:
            # last_step th∆∞·ªùng l√† list ho·∫∑c tuple, ph·∫ßn t·ª≠ ƒë·∫ßu (index 0) m·ªõi ch·ª©a tool_input
            step_detail = last_step[0]
            # Ki·ªÉm tra xem step_detail c√≥ thu·ªôc t√≠nh tool_input kh√¥ng
            if hasattr(step_detail, "tool_input"):
                # D√πng get ƒë·ªÉ tr√°nh KeyError n·∫øu "query" kh√¥ng t·ªìn t·∫°i
                action = step_detail.tool_input.get("query", None)

    # Gi·ªù ta ƒë√£ c√≥ th·ªÉ d√πng action (n·∫øu n√≥ kh√¥ng ph·∫£i None)
    if action and "plt" in action:
        st.write(response["output"])

        fig = execute_plt_code(action, df=st.session_state.df)
        if fig:
            st.pyplot(fig)

        st.write("**Executed code:**")
        st.code(action)

        # B·∫°n c√≥ th·ªÉ g·∫Øn th√™m info v·ªÅ action v√†o history n·∫øu mu·ªën
        to_display_string = (
            response["output"] + "\n" +
            f"```python\n{action}\n```"
        )
        st.session_state.history.append((query, to_display_string))
    else:
        # N·∫øu action l√† None (ho·∫∑c kh√¥ng ch·ª©a "plt")
        # th√¨ ta fallback sang logic c≈©
        st.write(response["output"])
        
        # B·∫°n v·∫´n c√≥ th·ªÉ hi·ªÉn th·ªã action (n·∫øu c√≥) ƒë·ªÉ debug
        if action:
            st.write(f"**Last step query (debug):** {action}")

        st.session_state.history.append((query, response["output"]))


def display_chat_history():
    st.markdown("## Chat History: ")
    for i, (q, r) in enumerate(st.session_state.history):
        st.markdown(f"**Query: {i+1}:** {q}")
        st.markdown(f"**Response: {i+1}:** {r}")
        st.markdown("---")


def main():

    # Set up streamlit interface
    st.set_page_config(page_title="üìä Smart Data Analysis Tool", page_icon="üìä", layout="centered")
    st.header("üìä Smart Data Analysis Tool")
    st.write(
        "### Welcome to our data analysis tool. This tools can assist your daily data analysis tasks. Please enjoy !"
    )

    # Load llms model
    llm = load_llm(model_name=MODEL_NAME)
    logger.info(f"### Successfully loaded {MODEL_NAME} !###")

    # Upload csv file
    with st.sidebar:
        uploaded_file = st.file_uploader("Upload your csv file here", type="csv")

    # Initial chat history
    if "history" not in st.session_state:
        st.session_state.history = []

    # Read csv file
    if uploaded_file is not None:
        st.session_state.df = pd.read_csv(uploaded_file)
        st.write("### Your uploaded data: ", st.session_state.df.head())

        # Create data analysis agent to query with our data
        da_agent = create_pandas_dataframe_agent(
            llm=llm,
            df=st.session_state.df,
            agent_type="tool-calling",
            allow_dangerous_code=True,
            verbose=True,
            return_intermediate_steps=True,
        )
        logger.info("### Sucessfully loaded data analysis agent !###")

        # Input query and process query
        query = st.text_input("Enter your questions: ")

        if st.button("Run query"):
            with st.spinner("Processing..."):
                process_query(da_agent, query)

    # Display chat history
    st.divider()
    display_chat_history()


if __name__ == "__main__":
    main()
