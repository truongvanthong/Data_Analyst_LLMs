import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from dotenv import load_dotenv
from langchain_experimental.agents.agent_toolkits.pandas.base import create_pandas_dataframe_agent

from src.logger.base import BaseLogger
from src.models.llms import load_llm
from src.utils import execute_plt_code


# ----- LOAD ENV & LOGGERS -----
load_dotenv()
logger = BaseLogger()

MODEL_NAME = "gpt-3.5-turbo"
# MODEL_NAME = "gemini-1.5-pro-latest"


def process_query(da_agent, query):
    """X·ª≠ l√Ω truy v·∫•n ng∆∞·ªùi d√πng v√† hi·ªÉn th·ªã k·∫øt qu·∫£ (c√≥ th·ªÉ k√®m bi·ªÉu ƒë·ªì)."""
    # response = da_agent.invoke(query)
    response = da_agent(query)

    # L·∫•y intermediate_steps
    intermediate_steps = response.get("intermediate_steps", [])
    action = None

    if intermediate_steps:
        last_step = intermediate_steps[-1]
        if len(last_step) > 0:
            step_detail = last_step[0]
            if hasattr(step_detail, "tool_input"):
                action = step_detail.tool_input.get("query", None)

    # N·∫øu detect c√≥ code plt
    if action and "plt" in action:
        # Hi·ªÉn th·ªã ph·∫ßn output text
        with st.chat_message("assistant"):
            st.markdown(response["output"])

        fig = execute_plt_code(action, df=st.session_state.df)
        if fig:
            st.pyplot(fig)

        # Hi·ªÉn th·ªã code ƒë√£ th·ª±c thi
        with st.expander("Executed code", expanded=False):
            st.code(action, language="python")

        # L∆∞u v√†o history
        to_display_string = response["output"] + f"\n```python\n{action}\n```"
        st.session_state.history.append((query, to_display_string))
    else:
        # Kh√¥ng c√≥ code
        with st.chat_message("assistant"):
            st.markdown(response["output"])

        # Debug code n·∫øu c·∫ßn
        if action:
            st.write(f"**[Debug] Last step query**: {action}")

        st.session_state.history.append((query, response["output"]))


def display_chat_history():
    """Hi·ªÉn th·ªã l·ªãch s·ª≠ chat theo d·∫°ng chat messages (n·∫øu Streamlit ƒë·ªß m·ªõi)."""
    # N·∫øu streamlit c≈© v√† kh√¥ng c√≥ st.chat_message, ta c√≥ th·ªÉ d√πng ph∆∞∆°ng th·ª©c c≈©
    for i, (q, r) in enumerate(st.session_state.history):
        with st.chat_message("user"):
            st.markdown(f"**Query {i+1}:** {q}")

        with st.chat_message("assistant"):
            st.markdown(f"**Response {i+1}:** {r}")


def main():
    # ---- PAGE CONFIG ----
    st.set_page_config(
        page_title="üìä Smart Data Analysis Tool", 
        page_icon="üìä", 
        layout="centered"
    )

    # ---- HEADER ----
    st.title("üìä Smart Data Analysis Tool")
    st.write(
        """
        <div style="text-align: justify;">
            Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi c√¥ng c·ª• ph√¢n t√≠ch d·ªØ li·ªáu th√¥ng minh. 
            B·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi, y√™u c·∫ßu t·∫°o bi·ªÉu ƒë·ªì v√† nhi·ªÅu t√≠nh nƒÉng kh√°c 
            li√™n quan ƒë·∫øn t·∫≠p d·ªØ li·ªáu c·ªßa m√¨nh. 
            <br><br>
            Ch·ªâ c·∫ßn t·∫£i file CSV l√™n, sau ƒë√≥ nh·∫≠p c√¢u h·ªèi ·ªü √¥ b√™n d∆∞·ªõi, 
            h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông th·ª±c thi v√† ƒë∆∞a ra c√¢u tr·∫£ l·ªùi k√®m bi·ªÉu ƒë·ªì (n·∫øu c·∫ßn).
        </div>
        """,
        unsafe_allow_html=True,
    )

    # ---- SIDEBAR ----
    with st.sidebar:
        st.header("Upload Dataset")
        uploaded_file = st.file_uploader("Ch·ªçn file CSV", type="csv")
        st.write("---")
        st.markdown(
            """
            **H∆∞·ªõng d·∫´n**  
            - T·∫£i file CSV c√≥ d·ªØ li·ªáu b·∫°n c·∫ßn ph√¢n t√≠ch.  
            - Nh·∫≠p c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu t√≠nh to√°n, t·∫°o bi·ªÉu ƒë·ªì.  
            - V√≠ d·ª•: *Plot bar chart so s√°nh doanh thu theo th√°ng.*  
            """
        )

    # ---- LLM LOADING ----
    llm = load_llm(model_name=MODEL_NAME)
    logger.info(f"### Successfully loaded {MODEL_NAME} !###")

    # Kh·ªüi t·∫°o bi·∫øn history n·∫øu ch∆∞a c√≥
    if "history" not in st.session_state:
        st.session_state.history = []

    # N·∫øu ƒë√£ upload file
    if uploaded_file is not None:
        st.session_state.df = pd.read_csv(uploaded_file)

        # Hi·ªÉn th·ªã m·ªôt v√†i d√≤ng ƒë·∫ßu c·ªßa data
        st.subheader("Preview your Data")
        st.dataframe(st.session_state.df.head(10), use_container_width=True)

        # T·∫°o agent
        da_agent = create_pandas_dataframe_agent(
            llm=llm,
            df=st.session_state.df,
            agent_type="tool-calling",
            allow_dangerous_code=True,
            verbose=True,
            return_intermediate_steps=True,
        )
        logger.info("### Successfully loaded data analysis agent !###")

        # Input user query
        st.markdown("### ƒê·∫∑t c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu c·ªßa b·∫°n:")
        query = st.text_input(
            "E.g.: 'H√£y m√¥ t·∫£ th·ªëng k√™ c∆° b·∫£n c·ªßa d·ªØ li·ªáu' ho·∫∑c 'V·∫Ω bi·ªÉu ƒë·ªì th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa c√°c c·ªôt...'",
            placeholder="Nh·∫≠p c√¢u h·ªèi..."
        )

        # N√∫t ch·∫°y
        if st.button("Run query", type="primary"):
            if query.strip():
                with st.spinner("Processing..."):
                    # Hi·ªÉn th·ªã ƒëo·∫°n chat user
                    with st.chat_message("user"):
                        st.markdown(query)

                    process_query(da_agent, query)
            else:
                st.warning("B·∫°n ch∆∞a nh·∫≠p c√¢u h·ªèi n√†o!")

    else:
        st.info("Vui l√≤ng t·∫£i l√™n m·ªôt file CSV ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

    # ---- Hi·ªÉn th·ªã to√†n b·ªô l·ªãch s·ª≠ chat ----
    st.divider()
    st.subheader("Chat History")
    display_chat_history()


if __name__ == "__main__":
    main()
